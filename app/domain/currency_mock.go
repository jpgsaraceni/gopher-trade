// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/currency"
)

// Ensure, that CurrencyMock does implement Currency.
// If this is not the case, regenerate this file with moq.
var _ Currency = &CurrencyMock{}

// CurrencyMock is a mock implementation of Currency.
//
// 	func TestSomethingThatUsesCurrency(t *testing.T) {
//
// 		// make and configure a mocked Currency
// 		mockedCurrency := &CurrencyMock{
// 			ConvertFunc: func(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error) {
// 				panic("mock out the Convert method")
// 			},
// 			DeleteCurrencyByCodeFunc: func(ctx context.Context, input currency.DeleteCurrencyByCodeInput) error {
// 				panic("mock out the DeleteCurrencyByCode method")
// 			},
// 			UpsertCurrencyFunc: func(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error) {
// 				panic("mock out the UpsertCurrency method")
// 			},
// 		}
//
// 		// use mockedCurrency in code that requires Currency
// 		// and then make assertions.
//
// 	}
type CurrencyMock struct {
	// ConvertFunc mocks the Convert method.
	ConvertFunc func(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error)

	// DeleteCurrencyByCodeFunc mocks the DeleteCurrencyByCode method.
	DeleteCurrencyByCodeFunc func(ctx context.Context, input currency.DeleteCurrencyByCodeInput) error

	// UpsertCurrencyFunc mocks the UpsertCurrency method.
	UpsertCurrencyFunc func(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Convert holds details about calls to the Convert method.
		Convert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input currency.ConvertInput
		}
		// DeleteCurrencyByCode holds details about calls to the DeleteCurrencyByCode method.
		DeleteCurrencyByCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input currency.DeleteCurrencyByCodeInput
		}
		// UpsertCurrency holds details about calls to the UpsertCurrency method.
		UpsertCurrency []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input currency.CreateCurrencyInput
		}
	}
	lockConvert              sync.RWMutex
	lockDeleteCurrencyByCode sync.RWMutex
	lockUpsertCurrency       sync.RWMutex
}

// Convert calls ConvertFunc.
func (mock *CurrencyMock) Convert(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error) {
	if mock.ConvertFunc == nil {
		panic("CurrencyMock.ConvertFunc: method is nil but Currency.Convert was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input currency.ConvertInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockConvert.Lock()
	mock.calls.Convert = append(mock.calls.Convert, callInfo)
	mock.lockConvert.Unlock()
	return mock.ConvertFunc(ctx, input)
}

// ConvertCalls gets all the calls that were made to Convert.
// Check the length with:
//     len(mockedCurrency.ConvertCalls())
func (mock *CurrencyMock) ConvertCalls() []struct {
	Ctx   context.Context
	Input currency.ConvertInput
} {
	var calls []struct {
		Ctx   context.Context
		Input currency.ConvertInput
	}
	mock.lockConvert.RLock()
	calls = mock.calls.Convert
	mock.lockConvert.RUnlock()
	return calls
}

// DeleteCurrencyByCode calls DeleteCurrencyByCodeFunc.
func (mock *CurrencyMock) DeleteCurrencyByCode(ctx context.Context, input currency.DeleteCurrencyByCodeInput) error {
	if mock.DeleteCurrencyByCodeFunc == nil {
		panic("CurrencyMock.DeleteCurrencyByCodeFunc: method is nil but Currency.DeleteCurrencyByCode was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input currency.DeleteCurrencyByCodeInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockDeleteCurrencyByCode.Lock()
	mock.calls.DeleteCurrencyByCode = append(mock.calls.DeleteCurrencyByCode, callInfo)
	mock.lockDeleteCurrencyByCode.Unlock()
	return mock.DeleteCurrencyByCodeFunc(ctx, input)
}

// DeleteCurrencyByCodeCalls gets all the calls that were made to DeleteCurrencyByCode.
// Check the length with:
//     len(mockedCurrency.DeleteCurrencyByCodeCalls())
func (mock *CurrencyMock) DeleteCurrencyByCodeCalls() []struct {
	Ctx   context.Context
	Input currency.DeleteCurrencyByCodeInput
} {
	var calls []struct {
		Ctx   context.Context
		Input currency.DeleteCurrencyByCodeInput
	}
	mock.lockDeleteCurrencyByCode.RLock()
	calls = mock.calls.DeleteCurrencyByCode
	mock.lockDeleteCurrencyByCode.RUnlock()
	return calls
}

// UpsertCurrency calls UpsertCurrencyFunc.
func (mock *CurrencyMock) UpsertCurrency(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error) {
	if mock.UpsertCurrencyFunc == nil {
		panic("CurrencyMock.UpsertCurrencyFunc: method is nil but Currency.UpsertCurrency was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input currency.CreateCurrencyInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockUpsertCurrency.Lock()
	mock.calls.UpsertCurrency = append(mock.calls.UpsertCurrency, callInfo)
	mock.lockUpsertCurrency.Unlock()
	return mock.UpsertCurrencyFunc(ctx, input)
}

// UpsertCurrencyCalls gets all the calls that were made to UpsertCurrency.
// Check the length with:
//     len(mockedCurrency.UpsertCurrencyCalls())
func (mock *CurrencyMock) UpsertCurrencyCalls() []struct {
	Ctx   context.Context
	Input currency.CreateCurrencyInput
} {
	var calls []struct {
		Ctx   context.Context
		Input currency.CreateCurrencyInput
	}
	mock.lockUpsertCurrency.RLock()
	calls = mock.calls.UpsertCurrency
	mock.lockUpsertCurrency.RUnlock()
	return calls
}
