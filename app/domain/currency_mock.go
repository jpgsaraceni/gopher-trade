// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/currency"
)

// Ensure, that CurrencyMock does implement Currency.
// If this is not the case, regenerate this file with moq.
var _ Currency = &CurrencyMock{}

// CurrencyMock is a mock implementation of Currency.
//
// 	func TestSomethingThatUsesCurrency(t *testing.T) {
//
// 		// make and configure a mocked Currency
// 		mockedCurrency := &CurrencyMock{
// 			ConvertFunc: func(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error) {
// 				panic("mock out the Convert method")
// 			},
// 			CreateCurrencyFunc: func(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error) {
// 				panic("mock out the CreateCurrency method")
// 			},
// 		}
//
// 		// use mockedCurrency in code that requires Currency
// 		// and then make assertions.
//
// 	}
type CurrencyMock struct {
	// ConvertFunc mocks the Convert method.
	ConvertFunc func(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error)

	// CreateCurrencyFunc mocks the CreateCurrency method.
	CreateCurrencyFunc func(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Convert holds details about calls to the Convert method.
		Convert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input currency.ConvertInput
		}
		// CreateCurrency holds details about calls to the CreateCurrency method.
		CreateCurrency []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input currency.CreateCurrencyInput
		}
	}
	lockConvert        sync.RWMutex
	lockCreateCurrency sync.RWMutex
}

// Convert calls ConvertFunc.
func (mock *CurrencyMock) Convert(ctx context.Context, input currency.ConvertInput) (currency.ConvertOutput, error) {
	if mock.ConvertFunc == nil {
		panic("CurrencyMock.ConvertFunc: method is nil but Currency.Convert was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input currency.ConvertInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockConvert.Lock()
	mock.calls.Convert = append(mock.calls.Convert, callInfo)
	mock.lockConvert.Unlock()
	return mock.ConvertFunc(ctx, input)
}

// ConvertCalls gets all the calls that were made to Convert.
// Check the length with:
//     len(mockedCurrency.ConvertCalls())
func (mock *CurrencyMock) ConvertCalls() []struct {
	Ctx   context.Context
	Input currency.ConvertInput
} {
	var calls []struct {
		Ctx   context.Context
		Input currency.ConvertInput
	}
	mock.lockConvert.RLock()
	calls = mock.calls.Convert
	mock.lockConvert.RUnlock()
	return calls
}

// CreateCurrency calls CreateCurrencyFunc.
func (mock *CurrencyMock) CreateCurrency(ctx context.Context, input currency.CreateCurrencyInput) (currency.CreateCurrencyOutput, error) {
	if mock.CreateCurrencyFunc == nil {
		panic("CurrencyMock.CreateCurrencyFunc: method is nil but Currency.CreateCurrency was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input currency.CreateCurrencyInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateCurrency.Lock()
	mock.calls.CreateCurrency = append(mock.calls.CreateCurrency, callInfo)
	mock.lockCreateCurrency.Unlock()
	return mock.CreateCurrencyFunc(ctx, input)
}

// CreateCurrencyCalls gets all the calls that were made to CreateCurrency.
// Check the length with:
//     len(mockedCurrency.CreateCurrencyCalls())
func (mock *CurrencyMock) CreateCurrencyCalls() []struct {
	Ctx   context.Context
	Input currency.CreateCurrencyInput
} {
	var calls []struct {
		Ctx   context.Context
		Input currency.CreateCurrencyInput
	}
	mock.lockCreateCurrency.RLock()
	calls = mock.calls.CreateCurrency
	mock.lockCreateCurrency.RUnlock()
	return calls
}
