// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package exchange

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/entities"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateExchangeFunc: func(ctx context.Context, exc entities.Exchange) error {
// 				panic("mock out the CreateExchange method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateExchangeFunc mocks the CreateExchange method.
	CreateExchangeFunc func(ctx context.Context, exc entities.Exchange) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateExchange holds details about calls to the CreateExchange method.
		CreateExchange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Exc is the exc argument value.
			Exc entities.Exchange
		}
	}
	lockCreateExchange sync.RWMutex
}

// CreateExchange calls CreateExchangeFunc.
func (mock *RepositoryMock) CreateExchange(ctx context.Context, exc entities.Exchange) error {
	if mock.CreateExchangeFunc == nil {
		panic("RepositoryMock.CreateExchangeFunc: method is nil but Repository.CreateExchange was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Exc entities.Exchange
	}{
		Ctx: ctx,
		Exc: exc,
	}
	mock.lockCreateExchange.Lock()
	mock.calls.CreateExchange = append(mock.calls.CreateExchange, callInfo)
	mock.lockCreateExchange.Unlock()
	return mock.CreateExchangeFunc(ctx, exc)
}

// CreateExchangeCalls gets all the calls that were made to CreateExchange.
// Check the length with:
//     len(mockedRepository.CreateExchangeCalls())
func (mock *RepositoryMock) CreateExchangeCalls() []struct {
	Ctx context.Context
	Exc entities.Exchange
} {
	var calls []struct {
		Ctx context.Context
		Exc entities.Exchange
	}
	mock.lockCreateExchange.RLock()
	calls = mock.calls.CreateExchange
	mock.lockCreateExchange.RUnlock()
	return calls
}
