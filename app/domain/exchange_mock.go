// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/exchange"
)

// Ensure, that ExchangeMock does implement Exchange.
// If this is not the case, regenerate this file with moq.
var _ Exchange = &ExchangeMock{}

// ExchangeMock is a mock implementation of Exchange.
//
// 	func TestSomethingThatUsesExchange(t *testing.T) {
//
// 		// make and configure a mocked Exchange
// 		mockedExchange := &ExchangeMock{
// 			ConvertFunc: func(ctx context.Context, input exchange.ConvertInput) (exchange.ConvertOutput, error) {
// 				panic("mock out the Convert method")
// 			},
// 			CreateExchangeFunc: func(ctx context.Context, input exchange.CreateExchangeInput) (exchange.CreateExchangeOutput, error) {
// 				panic("mock out the CreateExchange method")
// 			},
// 		}
//
// 		// use mockedExchange in code that requires Exchange
// 		// and then make assertions.
//
// 	}
type ExchangeMock struct {
	// ConvertFunc mocks the Convert method.
	ConvertFunc func(ctx context.Context, input exchange.ConvertInput) (exchange.ConvertOutput, error)

	// CreateExchangeFunc mocks the CreateExchange method.
	CreateExchangeFunc func(ctx context.Context, input exchange.CreateExchangeInput) (exchange.CreateExchangeOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Convert holds details about calls to the Convert method.
		Convert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input exchange.ConvertInput
		}
		// CreateExchange holds details about calls to the CreateExchange method.
		CreateExchange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input exchange.CreateExchangeInput
		}
	}
	lockConvert        sync.RWMutex
	lockCreateExchange sync.RWMutex
}

// Convert calls ConvertFunc.
func (mock *ExchangeMock) Convert(ctx context.Context, input exchange.ConvertInput) (exchange.ConvertOutput, error) {
	if mock.ConvertFunc == nil {
		panic("ExchangeMock.ConvertFunc: method is nil but Exchange.Convert was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input exchange.ConvertInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockConvert.Lock()
	mock.calls.Convert = append(mock.calls.Convert, callInfo)
	mock.lockConvert.Unlock()
	return mock.ConvertFunc(ctx, input)
}

// ConvertCalls gets all the calls that were made to Convert.
// Check the length with:
//     len(mockedExchange.ConvertCalls())
func (mock *ExchangeMock) ConvertCalls() []struct {
	Ctx   context.Context
	Input exchange.ConvertInput
} {
	var calls []struct {
		Ctx   context.Context
		Input exchange.ConvertInput
	}
	mock.lockConvert.RLock()
	calls = mock.calls.Convert
	mock.lockConvert.RUnlock()
	return calls
}

// CreateExchange calls CreateExchangeFunc.
func (mock *ExchangeMock) CreateExchange(ctx context.Context, input exchange.CreateExchangeInput) (exchange.CreateExchangeOutput, error) {
	if mock.CreateExchangeFunc == nil {
		panic("ExchangeMock.CreateExchangeFunc: method is nil but Exchange.CreateExchange was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input exchange.CreateExchangeInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateExchange.Lock()
	mock.calls.CreateExchange = append(mock.calls.CreateExchange, callInfo)
	mock.lockCreateExchange.Unlock()
	return mock.CreateExchangeFunc(ctx, input)
}

// CreateExchangeCalls gets all the calls that were made to CreateExchange.
// Check the length with:
//     len(mockedExchange.CreateExchangeCalls())
func (mock *ExchangeMock) CreateExchangeCalls() []struct {
	Ctx   context.Context
	Input exchange.CreateExchangeInput
} {
	var calls []struct {
		Ctx   context.Context
		Input exchange.CreateExchangeInput
	}
	mock.lockCreateExchange.RLock()
	calls = mock.calls.CreateExchange
	mock.lockCreateExchange.RUnlock()
	return calls
}
