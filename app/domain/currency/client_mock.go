// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package currency

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/vos"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			GetRatesFunc: func(ctx context.Context) (vos.DefaultRates, error) {
// 				panic("mock out the GetRates method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// GetRatesFunc mocks the GetRates method.
	GetRatesFunc func(ctx context.Context) (vos.DefaultRates, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRates holds details about calls to the GetRates method.
		GetRates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetRates sync.RWMutex
}

// GetRates calls GetRatesFunc.
func (mock *ClientMock) GetRates(ctx context.Context) (vos.DefaultRates, error) {
	if mock.GetRatesFunc == nil {
		panic("ClientMock.GetRatesFunc: method is nil but Client.GetRates was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRates.Lock()
	mock.calls.GetRates = append(mock.calls.GetRates, callInfo)
	mock.lockGetRates.Unlock()
	return mock.GetRatesFunc(ctx)
}

// GetRatesCalls gets all the calls that were made to GetRates.
// Check the length with:
//     len(mockedClient.GetRatesCalls())
func (mock *ClientMock) GetRatesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetRates.RLock()
	calls = mock.calls.GetRates
	mock.lockGetRates.RUnlock()
	return calls
}
