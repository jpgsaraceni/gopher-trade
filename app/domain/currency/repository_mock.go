// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package currency

import (
	"context"
	"sync"

	"github.com/jpgsaraceni/gopher-trade/app/domain/entities"
	"github.com/jpgsaraceni/gopher-trade/app/domain/vos"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateCurrencyFunc: func(ctx context.Context, cur entities.Currency) (entities.Currency, error) {
// 				panic("mock out the CreateCurrency method")
// 			},
// 			GetCurrencyByCodeFunc: func(ctx context.Context, code vos.CurrencyCode) (entities.Currency, error) {
// 				panic("mock out the GetCurrencyByCode method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateCurrencyFunc mocks the CreateCurrency method.
	CreateCurrencyFunc func(ctx context.Context, cur entities.Currency) (entities.Currency, error)

	// GetCurrencyByCodeFunc mocks the GetCurrencyByCode method.
	GetCurrencyByCodeFunc func(ctx context.Context, code vos.CurrencyCode) (entities.Currency, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCurrency holds details about calls to the CreateCurrency method.
		CreateCurrency []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cur is the cur argument value.
			Cur entities.Currency
		}
		// GetCurrencyByCode holds details about calls to the GetCurrencyByCode method.
		GetCurrencyByCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Code is the code argument value.
			Code vos.CurrencyCode
		}
	}
	lockCreateCurrency    sync.RWMutex
	lockGetCurrencyByCode sync.RWMutex
}

// CreateCurrency calls CreateCurrencyFunc.
func (mock *RepositoryMock) CreateCurrency(ctx context.Context, cur entities.Currency) (entities.Currency, error) {
	if mock.CreateCurrencyFunc == nil {
		panic("RepositoryMock.CreateCurrencyFunc: method is nil but Repository.CreateCurrency was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cur entities.Currency
	}{
		Ctx: ctx,
		Cur: cur,
	}
	mock.lockCreateCurrency.Lock()
	mock.calls.CreateCurrency = append(mock.calls.CreateCurrency, callInfo)
	mock.lockCreateCurrency.Unlock()
	return mock.CreateCurrencyFunc(ctx, cur)
}

// CreateCurrencyCalls gets all the calls that were made to CreateCurrency.
// Check the length with:
//     len(mockedRepository.CreateCurrencyCalls())
func (mock *RepositoryMock) CreateCurrencyCalls() []struct {
	Ctx context.Context
	Cur entities.Currency
} {
	var calls []struct {
		Ctx context.Context
		Cur entities.Currency
	}
	mock.lockCreateCurrency.RLock()
	calls = mock.calls.CreateCurrency
	mock.lockCreateCurrency.RUnlock()
	return calls
}

// GetCurrencyByCode calls GetCurrencyByCodeFunc.
func (mock *RepositoryMock) GetCurrencyByCode(ctx context.Context, code vos.CurrencyCode) (entities.Currency, error) {
	if mock.GetCurrencyByCodeFunc == nil {
		panic("RepositoryMock.GetCurrencyByCodeFunc: method is nil but Repository.GetCurrencyByCode was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Code vos.CurrencyCode
	}{
		Ctx:  ctx,
		Code: code,
	}
	mock.lockGetCurrencyByCode.Lock()
	mock.calls.GetCurrencyByCode = append(mock.calls.GetCurrencyByCode, callInfo)
	mock.lockGetCurrencyByCode.Unlock()
	return mock.GetCurrencyByCodeFunc(ctx, code)
}

// GetCurrencyByCodeCalls gets all the calls that were made to GetCurrencyByCode.
// Check the length with:
//     len(mockedRepository.GetCurrencyByCodeCalls())
func (mock *RepositoryMock) GetCurrencyByCodeCalls() []struct {
	Ctx  context.Context
	Code vos.CurrencyCode
} {
	var calls []struct {
		Ctx  context.Context
		Code vos.CurrencyCode
	}
	mock.lockGetCurrencyByCode.RLock()
	calls = mock.calls.GetCurrencyByCode
	mock.lockGetCurrencyByCode.RUnlock()
	return calls
}
